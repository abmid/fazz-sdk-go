// Code generated by MockGen. DO NOT EDIT.
// Source: request/api.go

// Package mock_request is a generated GoMock package.
package mock_request

import (
	context "context"
	fazz "github.com/abmid/fazz-sdk-go"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockApi is a mock of Api interface
type MockApi struct {
	ctrl     *gomock.Controller
	recorder *MockApiMockRecorder
}

// MockApiMockRecorder is the mock recorder for MockApi
type MockApiMockRecorder struct {
	mock *MockApi
}

// NewMockApi creates a new mock instance
func NewMockApi(ctrl *gomock.Controller) *MockApi {
	mock := &MockApi{ctrl: ctrl}
	mock.recorder = &MockApiMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockApi) EXPECT() *MockApiMockRecorder {
	return m.recorder
}

// Req mocks base method
func (m *MockApi) Req(ctx context.Context, method, url string, param, body any, headers map[string]string, response any) *fazz.Error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Req", ctx, method, url, param, body, headers, response)
	ret0, _ := ret[0].(*fazz.Error)
	return ret0
}

// Req indicates an expected call of Req
func (mr *MockApiMockRecorder) Req(ctx, method, url, param, body, headers, response interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Req", reflect.TypeOf((*MockApi)(nil).Req), ctx, method, url, param, body, headers, response)
}
